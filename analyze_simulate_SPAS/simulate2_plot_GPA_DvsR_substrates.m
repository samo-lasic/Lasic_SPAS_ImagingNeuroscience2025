% Plot results from GPA calculations (DvsR_*.mat) generated by simulate1_GPA_DvsR_substrates.m.
% Generates and saves figures: signal vs. b-value, signal differences vs. radius, MD vs. radius, and VD vs. radius for various waveforms.
% Figures are saved inside each model_* directory within the waveforms folder.


clear all
close all

restoredefaultpath
addpath(genpath(fullfile(pwd,'functions')));

% Root model path – the path to waveforms
model_root = fullfile('..', 'waveforms');

% model path - output from previous step (model data is inside the waveforms folder)
model_dirs = dir([model_root, '/model_*']);
model_dirs = {model_dirs.name};

select_substrate = 1; % Choose substrate type
switch select_substrate
    case 1
        substrateName = 'DvsR_cylinder';
        signal_at_R = 2.7 * 1e-6; % Cylinder
    case 2
        substrateName = 'DvsR_spheroid';
        signal_at_R = 2.7 * 1e-6; % Spheroid
    case 3
        substrateName = 'DvsR_stick';
        signal_at_R = 6.4 * 1e-6; % Stick
end

bmax = 3100 * 1e6; %  if 0 then use minimum b from set


plot_opt.showLabels = 0;
plot_opt.showLegend = 1;

saveFig = 1;
fig_resolution = '-r300'; % dpi, e.g. '-r72' '-r600'

plot_opt.fs = 16;
plot_opt.lw = 3;

plot_opt.size_mm_MD_VD = [50 40];
plot_opt.size_mm_sig = [50 50];
plot_opt.size_mm_dsig = [50 30];

plot_opt.fig_display_ratio = 1.2e-4;

minSig = 1*0.1; % if 0 then find automatically

% line styles, markers and colors
plot_opt.styles = {};
legend_str = {};
legend_str{end+1} = 'STE'; plot_opt.styles(end+1).marker = 'none'; plot_opt.styles(end).ms = 8; plot_opt.styles(end).line = '-'; plot_opt.styles(end).col = [0 0 0]; plot_opt.styles(end).lw = 3; %STE
legend_str{end+1} = 'tLTE'; plot_opt.styles(end+1).marker = 'none'; plot_opt.styles(end).ms = 8; plot_opt.styles(end).line = '--'; plot_opt.styles(end).col = [1 .8 0]; plot_opt.styles(end).lw = 2; % tLTE
legend_str{end+1} = 'optLTE'; plot_opt.styles(end+1).marker = 'none'; plot_opt.styles(end).ms = 8; plot_opt.styles(end).line = '--'; plot_opt.styles(end).col = [1 .5 0]; plot_opt.styles(end).lw = 2; % optLTE
legend_str{end+1} = 'SPAS1'; plot_opt.styles(end+1).marker = 'none'; plot_opt.styles(end).ms = 8; plot_opt.styles(end).line = '-'; plot_opt.styles(end).col = [1 0 0]; plot_opt.styles(end).lw = 2; % SPAS 1
legend_str{end+1} = 'SPAS2'; plot_opt.styles(end+1).marker = 'none'; plot_opt.styles(end).ms = 8; plot_opt.styles(end).line = '-'; plot_opt.styles(end).col = [0 .8 0]; plot_opt.styles(end).lw = 4; % SPAS 2
legend_str{end+1} = 'SPAS3'; plot_opt.styles(end+1).marker = 'none'; plot_opt.styles(end).ms = 8; plot_opt.styles(end).line = '-'; plot_opt.styles(end).col = [0 .3 1]; plot_opt.styles(end).lw = 2; % SPAS 3
legend_str{end+1} = 'geoSPAS'; plot_opt.styles(end+1).marker = 'none'; plot_opt.styles(end).ms = 8; plot_opt.styles(end).line = ':'; plot_opt.styles(end).col = 0.5*[1 1 1]; plot_opt.styles(end).lw = 3; % geoSPAS


for n_model = 1:numel(model_dirs)
    model_dir = fullfile(model_root,model_dirs{n_model});

    % load info about waveforms - needed when comparing TE and b
    load(fullfile(model_dir,'wfms_info.mat'))
    te = wfms(1).TE;
    if bmax == 0
        bmax1 = min([wfms.b]);
    else
        bmax1 = bmax;
    end

    load(fullfile(model_dir,[substrateName '.mat']),'R')

    [wfm_ind, leg_ind] = get_wfm_and_legend_ind(R.name, legend_str);

    % CALCULATE GEO SPAS MD and VA
    MD_geoSPAS = mean(R.MDpow(wfm_ind.SPAS,:),1);
    VD_geoSPAS = mean(R.VApow(wfm_ind.SPAS,:),1);

    % CALCULATE SIGNALS
    b = bmax*linspace(0,1,128);
    for n = 1:length(b)
        S(n,:,:,:) = exp(-b(n)*R.ADCs);
    end
    ES = mean(S,4);

    ES_geoSPAS = squeeze(geomean(mean(S(:,wfm_ind.SPAS,:,:),4),2));

    % CALCULATE b3200 signal differences vs R
    bhigh = bmax; %3.2e9;
    Sb = exp(-bhigh*R.ADCs);
    Sb_STE = squeeze(Sb(1,:,:));
    ESb_STE = mean(Sb_STE,2);
    Sb_SPAS = squeeze(Sb(wfm_ind.SPAS,:,:));
    ESb_SPAS = mean(Sb_SPAS,3);
    min_ESb_SPAS = min(ESb_SPAS);
    max_ESb_SPAS = max(ESb_SPAS);
    ESb_geoSPAS = squeeze(geomean(ESb_SPAS,1))';
    dESb_uA = ESb_geoSPAS - ESb_STE;
    dESb_TDD = max_ESb_SPAS - min_ESb_SPAS;


    % ----- collect data

    ES_STE = squeeze(ES(:,wfm_ind.STE,:));
    ES_SPAS = squeeze(ES(:,wfm_ind.SPAS,:));
    ES_geoSPAS = squeeze(geomean(ES_SPAS,2));

    min_ES_SPAS = squeeze(min(ES_SPAS,[],2));
    max_ES_SPAS = squeeze(max(ES_SPAS,[],2));
    dES_uA = ES_geoSPAS - ES_STE;
    dES_TDD = max_ES_SPAS - min_ES_SPAS;

    % --------- PLOT MD -------

    sel_wfm = [wfm_ind.STE, wfm_ind.tLTE, wfm_ind.optLTE, wfm_ind.SPAS, wfm_ind.geoSPAS];   % STE, tLTE, optLTE, SPAS123, geoSPAS
    sel_leg = [leg_ind.STE, leg_ind.tLTE, leg_ind.optLTE, leg_ind.SPAS, leg_ind.geoSPAS];   % STE, tLTE, optLTE, SPAS123, geoSPAS

    X = R.Rs * 1e6;
    Y = R.MDpow'/R.D0;
    Y(:,end+1) = MD_geoSPAS'/R.D0;

    fh = make_figure_XY(X, Y, sel_wfm, sel_leg, plot_opt.size_mm_MD_VD, plot_opt);

    if saveFig
        fileName = sprintf('%s_MD.png', substrateName );
        fig_path = fullfile(model_dir,fileName);
        print(fh,fig_path,'-dpng',fig_resolution);
    end



    % --------- PLOT VD -------

    Y = R.VApow'/R.D0^2;
    Y(:,end+1) = VD_geoSPAS'/R.D0^2;

    fh = make_figure_XY(X, Y, sel_wfm, sel_leg, plot_opt.size_mm_MD_VD, plot_opt);

    if plot_opt.showLegend
        lh = legend(legend_str(sel_leg));
        lh.Box ='off';
        lh.Location = 'best'; %'best'; % southeast
    end

    if saveFig
        fileName = sprintf('%s_VA.png', substrateName );
        fig_path = fullfile(model_dir,fileName);
        print(fh,fig_path,'-dpng',fig_resolution);
    end



    % -------------- SIGNAL ---------

    sel_wfm = [wfm_ind.STE, wfm_ind.tLTE, wfm_ind.optLTE, wfm_ind.SPAS, wfm_ind.geoSPAS];   % STE, tLTE, optLTE, SPAS123, geoSPAS
    sel_leg = [leg_ind.STE, leg_ind.tLTE, leg_ind.optLTE, leg_ind.SPAS, leg_ind.geoSPAS];   % STE, tLTE, optLTE, SPAS123, geoSPAS



    % find a common scale
    if minSig == 0
        minY = 1;
        for nR = 1:length(signal_at_R)
            [~, nr] = min(abs(R.Rs-signal_at_R(nR)));
            r = R.Rs(nr);
            minY1 = min(min(squeeze(ES(:,:,nr))));
            if minY1 < minY
                minY = minY1;
            end
        end
    else
        minY = minSig;
    end



    for nR = 1:length(signal_at_R)


        [~, nr] = min(abs(R.Rs-signal_at_R(nR)));
        r = R.Rs(nr);
        display(['r = ' num2str(r)]) % Display selected radius 

        X = b * 1e-6;
        Y = squeeze(ES(:,:,nr));
        Y(:,end+1) = ES_geoSPAS(:,nr);

        fh = make_figure_XY(X, Y, sel_wfm, sel_leg, plot_opt.size_mm_sig, plot_opt);


        if plot_opt.showLegend
            lh = legend(legend_str([sel_leg leg_ind.geoSPAS]));
            lh.Box ='off';
            lh.Location = 'best';
        end

        if plot_opt.showLabels
            xlabel('b [s/mm^2]')
        end
        set(gca, 'YScale', 'log',...
            'FontSize',plot_opt.fs,'box','off','TickDir','out','LineWidth',plot_opt.lw,'TickLength',[.02 .02])
        ylim([minY 1])


        if plot_opt.showLabels
            title(sprintf('R = %.3f µm', r*1e6))
        end


        if saveFig
            fileName = sprintf('%s_signal_R%d.png', substrateName, round(r*1e6) );
            fig_path = fullfile(model_dir,fileName);
            print(fh,fig_path,'-dpng',fig_resolution);
        end
    end

    % -------------- SIGNAL DIFFERENCES at high b ---------

    fig_size_mm = plot_opt.size_mm_dsig;

    X = R.Rs * 1e6;
    Y_uA = dES_uA(end,:);
    Y_TDD = dES_TDD(end,:);


    fh = figure;
    clf
    set(gcf, 'InvertHardCopy', 'off')
    set(fh,'Color','white', 'Units', 'inches', ...
        'PaperPosition',[0 0 fig_size_mm / 25.4 ], 'PaperPositionMode', 'auto');

    screen_size = get(0,'screensize');
    fh.Position(3:4) = plot_opt.fig_display_ratio * fig_size_mm .* screen_size(4);
    hold on

    for nR = 1:length(Y_uA)-1
        col = [(Y_TDD(nR)-min(Y_TDD))/(max(Y_TDD)-min(Y_TDD)) 0 (Y_uA(nR)-min(Y_uA))/(max(Y_uA)-min(Y_uA))];
        plot(X(nR:nR+1),Y_uA(nR:nR+1),'-','LineWidth',plot_opt.lw*2,'color',col)
        plot(X(nR:nR+1),Y_TDD(nR:nR+1),'-','LineWidth',plot_opt.lw*2,'color',col)
    end

    if plot_opt.showLabels
        xlabel('R [µm]')
    end
    set(gca, 'YScale', 'lin',...
        'FontSize',plot_opt.fs,'box','off','TickDir','out','LineWidth',plot_opt.lw,'TickLength',[.02 .02])
    %ylim([minY 1])

    if plot_opt.showLabels
        title(sprintf('b = %.3f', bhigh*1e-6))
    end


    if saveFig
        fileName = sprintf('%s_signal_dif_b%d.png', substrateName, round(bhigh*1e-6) );
        fig_path = fullfile(model_dir,fileName);
        print(fh,fig_path,'-dpng',fig_resolution);
    end


    % log signals
    logY_uA = log(Y_uA);
    logY_TDD = log(Y_TDD);


    fh = figure;
    clf
    set(gcf, 'InvertHardCopy', 'off')
    set(fh,'Color','white', 'Units', 'inches', ...
        'PaperPosition',[0 0 fig_size_mm / 25.4 ], 'PaperPositionMode', 'auto');

    screen_size = get(0,'screensize');
    fh.Position(3:4) = plot_opt.fig_display_ratio * fig_size_mm .* screen_size(4);
    hold on
    for nR = 1:length(Y_uA)-1
        col = [(logY_TDD(nR)-min(logY_TDD))/(max(logY_TDD)-min(logY_TDD)) 0 (logY_uA(nR)-min(logY_uA))/(max(logY_uA)-min(logY_uA))];
        plot(X(nR:nR+1),logY_uA(nR:nR+1),'-','LineWidth',plot_opt.lw*2,'color',col)
        plot(X(nR:nR+1),logY_TDD(nR:nR+1),'-','LineWidth',plot_opt.lw*2,'color',col)
    end

    if plot_opt.showLabels
        xlabel('R [µm]')
    end
    set(gca, 'YScale', 'lin',...
        'FontSize',plot_opt.fs,'box','off','TickDir','out','LineWidth',plot_opt.lw,'TickLength',[.02 .02])
    %ylim([minY 1])

    if plot_opt.showLabels
        title(sprintf('b = %.3f', bhigh*1e-6))
    end

end




% ------------------------ FUNCTIONS ---------------------------------------------

function help_plot(X,Y,styles,ind)
plot(X,Y,...
    'Marker',...
    styles(ind).marker,...
    'MarkerSize',...
    styles(ind).ms,...
    'LineWidth',...
    styles(ind).lw,...
    'LineStyle',...
    styles(ind).line,...
    'color', ...
    styles(ind).col)
end


function fh = make_figure_XY(X, Y, sel_wfm, sel_leg, fig_size_mm, plot_opt)

fh = figure;
clf
set(gcf, 'InvertHardCopy', 'off')
set(fh,'Color','white', 'Units', 'inches', ...
    'PaperPosition',[0 0 fig_size_mm / 25.4 ], 'PaperPositionMode', 'auto');

screen_size = get(0,'screensize');
fh.Position(3:4) = plot_opt.fig_display_ratio * fig_size_mm .* screen_size(4);

hold on

for m = 1:length(sel_wfm)
    help_plot(X,Y(:, sel_wfm(m)), plot_opt.styles,sel_leg(m))
end

if plot_opt.showLabels
    ylabel('MD/D0')
end
% xlabel('R [µm]')
set(gca, 'YScale', 'lin',...
    'FontSize',plot_opt.fs,'box','off','TickDir','out','LineWidth',plot_opt.lw,'TickLength',[.02 .02])
end


function [wfm_ind, leg_ind] = get_wfm_and_legend_ind(wfm_name, legend_str)

n_SPAS = find(contains(wfm_name,'_SPAS1')); % select SPAS
n_SPAS = [n_SPAS find(contains(wfm_name,'_SPAS2'))]; % select SPAS
n_SPAS = [n_SPAS find(contains(wfm_name,'_SPAS3'))]; % select SPAS
n_geoSPAS = length(legend_str);

n_tLTE = find(contains(wfm_name,'_tunedLTE'));
n_optLTE = find(contains(wfm_name,'_optTunedLTE'));
n_STE = 1:numel(wfm_name);
n_STE = n_STE(~ismember(n_STE,n_SPAS) & ~ismember(n_STE,n_tLTE) & ~ismember(n_STE,n_optLTE));


wfm_ind.SPAS = n_SPAS;
wfm_ind.tLTE = n_tLTE;
wfm_ind.optLTE = n_optLTE;
wfm_ind.STE = n_STE;
wfm_ind.geoSPAS = n_geoSPAS;

n_SPAS = find(contains(legend_str,'SPAS1')); % select SPAS
n_SPAS = [n_SPAS find(contains(legend_str,'SPAS2'))]; % select SPAS
n_SPAS = [n_SPAS find(contains(legend_str,'SPAS3'))]; % select SPAS
n_geoSPAS = length(legend_str);

n_tLTE = find(contains(legend_str,'tLTE') & ~contains(legend_str,'optLTE'));
n_optLTE = find(contains(legend_str,'optLTE'));
n_STE = 1:numel(legend_str);
n_STE = n_STE(~ismember(n_STE,n_SPAS) ...
    & ~ismember(n_STE,n_tLTE) & ~ismember(n_STE,n_optLTE) & ~ismember(n_STE,n_geoSPAS));

leg_ind.SPAS = n_SPAS;
leg_ind.tLTE = n_tLTE;
leg_ind.optLTE = n_optLTE;
leg_ind.STE = n_STE;
leg_ind.geoSPAS = n_geoSPAS;

end

