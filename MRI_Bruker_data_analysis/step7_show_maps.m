% Maps generated in previous steps can be used to generate tiled slices (saved in "fig" folder).
% Additionally, subtraction maps from subsequent scans within the same session (generated by the script `..._subtract_subsequent_maps.m`) can be used.

clear all
close all

setup_code_path()


data_opt.append_folder_name = '_out';
data_path_struct = setup_data_path(data_opt);


warning('off','all')

nii_base_str = 'merged_';


% ---------------------------------------------------

c = 3;
% 1 - ex vivo (manual rois)
% 2 - ex vivo (automatic rois)
% 3 - in vivo (manual rois)
% 4 - in vivo (automatic rois)
% 5 - ex vivo compare uFA (manual rois)
% 6 - ex vivo compare uFA2 (manual rois)
% 7 - in vivo compare uFA (manual rois)
% 8 - in vivo compare uFA2 (manual rois)

% select slices and tiling
% opt.fig = figure_opt(3); % 4 slices (2-5)
% opt.fig = figure_opt(4); % 4 slices (1-4)
% opt.fig = figure_opt(5); % 6 slices (1-6)

opt.fig = figure_opt(6); % 4 slices in 1 line (2-5)
opt.fig = figure_opt(7); % 6 slices in 1 line (1-6)

opt.fig.save = 1;
opt.fig.num = 10;
opt.fig.show_rois = 0; % if not present, don't show roi (define rois in setup_data_path!)

opt.data_zoom_thresh = 0; %.005; % .015 signal axis projection is larger than threshold

opt.show_subtraction_maps = [0]; %[0 1] % if 1, compare maps from the same session (used to monitor changes in vivo)

% opt.map_name_prepend = '_s_g_';
% opt.map_name_prepend = '_g_';
% opt.map_name_prepend = '_a_g_';
% opt.map_name_prepend = '_s_a_g_';
% opt.map_name_prepend = '_dn_mc_a_g_';
opt.map_name_prepend = '_dn_mc_s_a_g_';

if c < 5
    if (1)
        opt.map_names = {'dti_s0_geoSPAS', 'dti_md_geoSPAS','dti_fa_geoSPAS', 'pa_muFA', 'pa_muFA2', 'OP'};
        opt.title_strings = {'dti_s0', 'dti_md', 'dti_fa', 'muFA', 'muFA2', 'OP'};
        opt.select_map_numbers = [1:5];

        opt.autoLIM_array = [1 0 0 0 0 0]; % if 1 use autoLIM_factor * [min max] else use absolute limits

        opt.LIM_array_par_maps = [5000   1e-9     .8  1  1  1];  % normal maps
        opt.LIM_array_sub_maps = [1000   0.3e-9   .5 .5  .5 .5 ];  % subtraction maps


    end


    if (0)
        opt.map_names = {'pa_raw_muA_dlogs','pa_raw_TDD_dlogs','pa_raw_muA_ds','pa_raw_TDD_ds'};
        opt.title_strings = {'muA_dlogs', 'TDD_dlogs','muA_ds', 'TDD_ds'};
        opt.select_map_numbers = [1:2];

        opt.autoLIM_array = [0 0 0 0]; % if 1 use autoLIM_factor * [min max] else use absolute limits

        opt.LIM_array_par_maps = [0.35 0.45 0.35 0.45]; % normal maps
        opt.LIM_array_sub_maps = [0.1 0.1 0.1 0.1]; % subtraction maps


    end

    if (0)
        opt.map_names = { 'pa_muFA', 'pa_muFA_RSS','pa_muFA_NRMSE','OP'};
        opt.title_strings = { 'muFA', 'muFA_RSS','muFA_NRMSE','OP'};

        opt.select_map_numbers = [1:4];

        opt.autoLIM_array = [0 1 0 0]; % if 1 use autoLIM_factor * [min max] else use absolute limits

        opt.LIM_array_par_maps = [1  1  .03 1 ];  % normal maps
        opt.LIM_array_sub_maps = opt.LIM_array_par_maps;  % subtraction maps
    end

elseif c > 4

    if c == 5 || c == 7
        map_str = 'muFA';
    else
        map_str = 'muFA2';
    end

    tmp_title_strings = {'SPAS1_', 'SPAS2_', 'SPAS3_', '', ...
        'SPAS_dif_12_', 'SPAS_dif_13_','SPAS_dif_23_',...
        'SPAS_dif_1g_', 'SPAS_dif_g3_'};

    opt.title_strings = strcat(tmp_title_strings, map_str);
    opt.map_names = strcat('pa_', tmp_title_strings, map_str);

    opt.select_map_numbers = [1:length(opt.map_names)];
%     opt.select_map_numbers = [1:4];
%     opt.select_map_numbers = [5:9];

    opt.autoLIM_array = zeros(1,numel(opt.map_names)); % if 1 use autoLIM_factor * [min max] else use absolute limits

    if c == 5 % ex vivo
        opt.LIM_array_par_maps = 1*[ones(1,4) .45*ones(1,5)];  % normal maps
        opt.LIM_array_sub_maps =.5*ones(1,numel(opt.map_names));  % subtraction maps
    elseif c == 6 % ex vivo
        opt.LIM_array_par_maps = 1*[ones(1,4) .65*ones(1,5)];  % normal maps
        opt.LIM_array_sub_maps =.5*ones(1,numel(opt.map_names));  % subtraction maps
    elseif c == 7 % in vivo
        opt.LIM_array_par_maps = 1*[ones(1,4) .3*ones(1,5)];  % normal maps
        opt.LIM_array_sub_maps =.5*ones(1,numel(opt.map_names));  % subtraction maps
    elseif c == 8 % in vivo
        opt.LIM_array_par_maps = 1*[ones(1,4) .3*ones(1,5)];  % normal maps
        opt.LIM_array_sub_maps =.5*ones(1,numel(opt.map_names));  % subtraction maps
    end
end



% ---------------------------------------------------



if c == 1 || c == 2 % ex vivo
    opt.fig.roi_colors = viridis(numel(data_path_struct.roi_names));
    opt.fig.roi_alpha = 0.75 * ones(1,numel(data_path_struct.roi_names));

    opt.fig.roi_detail = 1; % relative to 1
    opt.fig.roi_smoothing = 2; % 2
end

if c == 3 || c == 4 % in vivo

    opt.fig.roi_colors = [];
    Nrois = numel(data_path_struct.roi_names);
    if Nrois == 1
        opt.fig.roi_colors = [1 1 1];
    elseif Nrois > 0 & Nrois < 5
        opt.fig.roi_colors = viridis(numel(data_path_struct.roi_names));
    elseif Nrois == 5
        opt.fig.roi_colors = viridis(numel(data_path_struct.roi_names)-1);
        opt.fig.roi_colors(end+1,:) = [1 1 1];
    end


    %     opt.fig.roi_alpha = 0.75 * ones(1,numel(data_path_struct.roi_names));
    %     opt.fig.roi_alpha(end) = .3;
    opt.fig.roi_alpha = [1 0.75 0.75 0.75 0.3];
    opt.fig.roi_plot_order = [1 4 2 3 5];

    opt.fig.roi_detail = 1.5; % relative to 1
    opt.fig.roi_smoothing = 1.5; % 2

    opt.fig.XLIM = [0.0441913, 1.15639]; % automatic if this field is not existing or empty []
    opt.fig.YLIM = [0.000554465, 0.320087];
end

if c == 2 || c == 4
    opt.fig.roi_colors = [1 0.4 0; 0 .8 1];
    opt.fig.roi_alpha = 1*[1 1];
end

if c > 4 % compare uFA
    opt.fig.roi_colors = viridis(numel(data_path_struct.roi_names));
    opt.fig.roi_alpha = 0.75 * ones(1,numel(data_path_struct.roi_names));

    opt.fig.roi_detail = 1; % relative to 1
    opt.fig.roi_smoothing = 2; % 2

    %     opt.fig.roi_colors = [1 0.4 0; 0 .8 1];
    %     opt.fig.roi_alpha = 1*[1 1];
end

for n_data_path = 1:numel(data_path_struct)
    root_data_path = data_path_struct(n_data_path).root_data_path;
    exp_folder_name = data_path_struct(n_data_path).exp_folder_name;
    root_data_path = fullfile(root_data_path,exp_folder_name);
    select_subfolders = data_path_struct(n_data_path).select_subfolders;
    roi_names = data_path_struct(n_data_path).roi_names;
    roi_names = ensure_fn_ext(roi_names, '.nii.gz');

    if isfield(data_path_struct(n_data_path),'post_mask')
        opt.post_mask = data_path_struct(n_data_path).post_mask;
        opt.post_mask = ensure_fn_ext(opt.post_mask, '.nii.gz');
    end

    merged_names = SPAS_numbers_to_names(select_subfolders, nii_base_str);

    SPAS_make_parameter_maps(root_data_path,merged_names,roi_names,opt);
end